#!/usr/bin/env node

var sequelizeAuto = require('../')
  , path = require('path');

var argv = require('optimist')
  .usage('Usage: sequelize-auto -h <host> -d <database> -u <user> -x [password] -p [port]  --dialect [dialect] -c [/path/to/config] -o [/path/to/models]')
  .demand(['h', 'd'])
  .alias('h', 'host')
  .alias('d', 'database')
  .alias('u', 'user')
  .alias('x', 'pass')
  .alias('p', 'port')
  .alias('c', 'config')
  .alias('o', 'output')
  .alias('e', 'dialect')
  .alias('a', 'additional')
  .describe('h', 'IP/Hostname for the database.')
  .describe('d', 'Database name.')
  .describe('u', 'Username for database.')
  .describe('x', 'Password for database.')
  .describe('p', 'Port number for database.')
  .describe('c', 'JSON file for sending additional options to the Sequelize object.')
  .describe('o', 'What directory to place the models.')
  .describe('e', 'The dialect/engine that you\'re using: postgres, mysql, sqlite')
  .describe('a', 'Path to a json file to inject into all models as additional settings (you can also use the config file with an additional value)')
  .argv;

var configFile = {};
if (!!argv.c) {
  configFile = require(path.resolve(argv.c));
}

var additional = {};
if (!!argv.a) {
  additional = require(path.resolve(argv.a));
}
if(!!configFile.additional) {
  additional = configFile.additional;
}

configFile.dialect = argv.e || configFile.dialect || 'mysql';
configFile.port = argv.p || configFile.port || 3306;
configFile.host = argv.h || configFile.host || 'localhost';
configFile.storage = argv.d

var auto = new sequelizeAuto(argv.d, argv.u, (!! argv.x ? ('' + argv.x) : null), configFile);
var dir = argv.o || path.resolve(process.cwd() + '/models');

auto.run({spaces: true, indentation: 2, directory: dir, additional : additional}, function(err){
  if (err) throw err;
  console.log('Done!');
});
